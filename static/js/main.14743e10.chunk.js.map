{"version":3,"sources":["Chapter.js","Book.js","BookSelector.js","App.js","serviceWorker.js","index.js"],"names":["Chapter","chapter","Verse","index","verse","data-index","key","Verses","map","el","i","Book","chapters","useState","setVerses","ChapterRows","useEffect","BookSelector","book","setBook","selectable","useRef","books","setBooks","show","setShow","selectBook","event","name","classes","push","className","join","onClick","bookData","current","style","display","console","log","ref","I","App","bible","setBible","setChapters","fetch","then","res","json","data","catch","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.14743e10.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Chapter({chapter}) {\n\tfunction Verse({index,verse}) {\n\t\treturn <span\n\t\t\tdata-index={index}\n\t\t\tkey={index}\n\t\t>\n\t\t\t{verse}&nbsp;&nbsp;\n\t\t</span>\n\t}\n\n\tfunction Verses() {\n\t\tif (chapter) {\n\t\t\treturn chapter.map((el,i)=>i\n\t\t\t\t?<Verse index={i} key={i} verse={el} />\n\t\t\t\t:<></>)\n\t\t} else {\n\t\t\treturn <></>\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Verses />\n\t\t</div>\n\t)\n}\n\nexport default Chapter","import React,{useEffect,useState} from 'react'\nimport Chapter from \"./Chapter\";\n\nfunction Book({chapters}) {\n\tconst [chapter, setChapter] = useState(1)\n\tconst [verses, setVerses] = useState([])\n\n\n\tuseEffect(() => {\n\t\tif (chapters) setVerses(chapters[chapter])\n\t\t// console.log('book',chapters)\n\t}, [chapters,chapter])\n\n\t// useEffect(() => {\n\t// \tconsole.log('verses',verses)\n\t// }, [verses])\n\n\n\tfunction ChapterRows() {\n\t\tif (chapters) {\n\t\t\treturn chapters.map((el,i)=>i\n\t\t\t\t?<tr>\n\t\t\t\t\t<td>{i}</td>\n\t\t\t\t\t<td><Chapter chapter={chapters[i]} key={i} /></td>\n\t\t\t\t</tr>\n\t\t\t\t:<></>)\n\t\t} else{\n\t\t\treturn <></>\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<table><tbody>\n\t\t\t\t<ChapterRows />\n\t\t\t</tbody></table>\n\t\t</div>\n\t)\n}\n\nexport default Book","import React,{useEffect,useRef,useState} from 'react'\nimport bookData from './books.json'\n\nfunction BookSelector({book, setBook}) {\n\tconst selectable = useRef(null)\n\tconst [books, setBooks] = useState([])\n\tconst [show, setShow] = useState(false)\n\n\tuseEffect(() => {\n  //   const url = 'https://raw.githubusercontent.com/theonize/charis/master/json/books.json'\n  //   fetch(url)\n  //   .then(res=>res.json())\n  //   .then(data=>{\n  //     setBooks(data)\n  //   })\n\t//   .catch(error=>console.error(error))\n\t\tsetBooks(bookData)\n\t}, [])\n\n\tfunction selectBook(index) {\n\t\treturn function(event) {\n\t\t\tsetBook(index)\n\t\t}\n\t}\n\n\tfunction BookSelector({index,name}) {\n\t\tif (index) {\n\t\t\tconst classes = ['book','selection']\n\t\t\t\n\t\t\tif (index === book) classes.push('highlight')\n\n\t\t\treturn <span\n\t\t\t\tclassName={classes.join(' ')}\n\t\t\t\tkey={index}\n\t\t\t\tonClick={selectBook(index)}\n\t\t\t>{name}</span>\n\t\t} else {\n\t\t\treturn <></>\n\t\t}\n\t}\n\n\tfunction toggleSelector() {\n\t\tif (show) {\n\t\t\tselectable.current.style.display = 'flex'\n\t\t\tsetShow(false)\n\t\t\tconsole.log('unshow',selectable)\n\t\t} else {\n\t\t\tselectable.current.style.display = 'none'\n\t\t\tsetShow(true)\n\t\t\tconsole.log('show')\n\t\t}\n\n\t}\n\n\treturn (<>\n\t\t<button onClick={toggleSelector}>Select a Book</button>\n\n\t\t<div className=\"book selector\" ref={selectable}>\n\t\t\t{books.map((el,I)=><BookSelector index={I} name={el} />)}\n\t\t</div>\n\t</>)\n}\n\nexport default BookSelector","import React,{useEffect,useState} from 'react';\nimport './App.css';\nimport Book from \"./Book\";\nimport BookSelector from \"./BookSelector\";\n\nfunction App() {\n  const [bible, setBible] = useState([])\n  const [book, setBook] = useState(1)\n  const [chapters, setChapters] = useState([])\n\n  useEffect(() => {\n    const url = 'https://raw.githubusercontent.com/theonize/charis/master/json/charis.json'\n    fetch(url)\n    .then(res=>res.json())\n    .then(data=>{\n      setBible(data)\n    })\n    .catch(error=>console.error(error))\n  }, [])\n\n  useEffect(() => {\n    setChapters(bible[book])\n  }, [bible,book])\n\n  return (\n    <div>\n      <header>\n        <BookSelector book={book} setBook={setBook} />\n        <Book chapters={chapters} />\n      </header>\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}