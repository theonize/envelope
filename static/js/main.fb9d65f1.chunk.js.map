{"version":3,"sources":["Chapter.js","Book.js","Selector.js","ChapterSelector.js","App.js","serviceWorker.js","index.js"],"names":["Chapter","chapter","Verse","index","verse","data-index","key","Verses","map","el","i","Book","chapters","useState","setVerses","ChapterRows","id","useEffect","BookSelector","book","setBook","selectable","useRef","bookName","setBookName","books","setBooks","show","setShow","ChapterLink","className","href","onClick","event","document","querySelectorAll","forEach","classList","remove","target","add","toggleSelector","selectBook","name","classes","push","join","current","style","display","console","log","bookData","ref","I","ChapterSelector","App","bible","setBible","setChapters","fetch","then","res","json","data","catch","error","Selector","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fb9d65f1.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Chapter({chapter}) {\n\tfunction Verse({index,verse}) {\n\t\treturn <span\n\t\t\tdata-index={index}\n\t\t\tkey={index}\n\t\t>\n\t\t\t{verse}&nbsp;&nbsp;\n\t\t</span>\n\t}\n\n\tfunction Verses() {\n\t\tif (chapter) {\n\t\t\treturn chapter.map((el,i)=>i\n\t\t\t\t?<Verse index={i} key={i} verse={el} />\n\t\t\t\t:<></>)\n\t\t} else {\n\t\t\treturn <></>\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Verses />\n\t\t</div>\n\t)\n}\n\nexport default Chapter","import React,{useEffect,useState} from 'react'\nimport Chapter from \"./Chapter\";\n\nfunction Book({chapters}) {\n\tconst [chapter, setChapter] = useState(1)\n\tconst [verses, setVerses] = useState([])\n\n\n\tuseEffect(() => {\n\t\tif (chapters) setVerses(chapters[chapter])\n\t\t// console.log('book',chapters)\n\t}, [chapters,chapter])\n\n\t// useEffect(() => {\n\t// \tconsole.log('verses',verses)\n\t// }, [verses])\n\n\n\tfunction ChapterRows() {\n\t\tif (chapters) {\n\t\t\treturn chapters.map((el,i)=>i\n\t\t\t\t?<tr id={`chapter_${i}`}>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t{i}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<Chapter chapter={chapters[i]} key={i} />\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t:<></>)\n\t\t} else{\n\t\t\treturn <></>\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<table><tbody>\n\t\t\t\t<ChapterRows />\n\t\t\t</tbody></table>\n\t\t</div>\n\t)\n}\n\nexport default Book","import React,{useEffect,useRef,useState} from 'react'\nimport bookData from './books.json'\n\nfunction BookSelector({book, chapters=[], setBook}) {\n\tconst selectable = useRef(null)\n\n\tconst [bookName, setBookName] = useState('Select a Book')\n\tconst [books, setBooks] = useState([])\n\tconst [show, setShow] = useState(false)\n\n\tuseEffect(() => {\n  //   const url = 'https://raw.githubusercontent.com/theonize/charis/master/json/books.json'\n  //   fetch(url)\n  //   .then(res=>res.json())\n  //   .then(data=>{\n  //     setBooks(data)\n  //   })\n\t//   .catch(error=>console.error(error))\n\t\tsetBooks(bookData)\n\t}, [])\n\n\tfunction ChapterLink({index}) {\n\t\tfunction clickHandler(event) {\n\t\t\tconst links = document.querySelectorAll('.chapter.link')\n\t\t\t\n\t\t\tlinks.forEach(el => el.classList.remove('highlight'))\n\t\t\tevent.target.classList.add('highlight')\n\t\t\ttoggleSelector()\n\t\t}\n\n\t\tif (index) return <a \n\t\t\tclassName=\"chapter link\"\n\t\t\thref={`#chapter_${index}`}\n\t\t\tid={`chapter_link_${index}`}\n\t\t\tonClick={clickHandler}\n\t\t>{index}</a>\n\t\telse return <></>\n\t}\n\n\n\tfunction selectBook(index) {\n\t\treturn function(event) {\n\t\t\tsetBook(index)\n\t\t\tsetBookName(books[index])\n\t\t\ttoggleSelector()\n\t\t}\n\t}\n\n\tfunction BookSelector({index,name}) {\n\t\tif (index) {\n\t\t\tconst classes = ['book','selection']\n\t\t\t\n\t\t\tif (index === book) classes.push('highlight')\n\n\t\t\treturn <span\n\t\t\t\tclassName={classes.join(' ')}\n\t\t\t\tkey={index}\n\t\t\t\tonClick={selectBook(index)}\n\t\t\t>{name}</span>\n\t\t} else {\n\t\t\treturn <></>\n\t\t}\n\t}\n\n\tfunction toggleSelector() {\n\t\tif (show) {\n\t\t\tselectable.current.style.display = 'flex'\n\t\t\tsetShow(false)\n\t\t\tconsole.log('unshow',selectable)\n\t\t} else {\n\t\t\tselectable.current.style.display = 'none'\n\t\t\tsetShow(true)\n\t\t\tconsole.log('show')\n\t\t}\n\n\t}\n\n\treturn (<>\n\t\t<button onClick={toggleSelector}>{bookName}</button>\n\n\t\t<div ref={selectable}>\n\t\t\t<div className=\"book selector\">\n\t\t\t\t{books.map((el,I)=><BookSelector index={I} name={el} />)}\n\t\t\t</div>\n\n\t\t\t<div className=\"chapter selector\">\n\t\t\t\t{chapters ? chapters.map((el,I)=><ChapterLink key={I} index={I} />) : ''}\n\t\t\t</div>\n\t\t</div>\n\t</>)\n}\n\nexport default BookSelector","import React from 'react'\n\nfunction ChapterSelector({chapters=[]}) {\n\n  return (<></> )\n}\n\nexport default ChapterSelector\n","import React,{useEffect,useState} from 'react';\nimport './App.css';\nimport Book from \"./Book\";\nimport Selector from \"./Selector\";\nimport ChapterSelector from './ChapterSelector';\n\nfunction App() {\n  const [bible, setBible] = useState([])\n  const [book, setBook] = useState(1)\n  const [chapters, setChapters] = useState([])\n\n  useEffect(() => {\n    const url = 'https://raw.githubusercontent.com/theonize/charis/master/json/charis.json'\n    fetch(url)\n    .then(res=>res.json())\n    .then(data=>{\n      setBible(data)\n    })\n    .catch(error=>console.error(error))\n  }, [])\n\n  useEffect(() => {\n    setChapters(bible[book])\n  }, [bible,book])\n\n  return (\n    <div>\n      <header>\n        <Selector book={book} chapters={chapters} setBook={setBook} />\n        \n        <ChapterSelector />\n      </header>\n\n      <Book chapters={chapters} />\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}